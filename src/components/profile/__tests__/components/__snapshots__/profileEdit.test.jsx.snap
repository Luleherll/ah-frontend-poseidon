// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test profile edit page renders profile edit page successfully 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <ProfileEdit
    onChange={[MockFunction]}
    onClick={[MockFunction]}
    onSubmit={[MockFunction]}
    profile={
      Object {
        "bio": "I love sports and tech",
        "email": "bill.twinomuhwezi@andela.com",
        "following": false,
        "image": null,
        "username": "kabanga",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": ProfileEdit {
      "_reactInternalFiber": FiberNode {
        "_debugID": 50,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 49,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "onChange": [MockFunction],
              "onClick": [MockFunction],
              "onSubmit": [MockFunction],
              "profile": Object {
                "bio": "I love sports and tech",
                "email": "bill.twinomuhwezi@andela.com",
                "following": false,
                "image": null,
                "username": "kabanga",
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "onChange": [MockFunction],
              "onClick": [MockFunction],
              "onSubmit": [MockFunction],
              "profile": Object {
                "bio": "I love sports and tech",
                "email": "bill.twinomuhwezi@andela.com",
                "following": false,
                "image": null,
                "username": "kabanga",
              },
            },
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container edit-form profile"
                  >
                    <form>
                      <div
                        class="form-group profile-field"
                      >
                        <div />
                        <label
                          class="btn btn-outline-primary btn-file"
                        >
                          Change image 
                          <input
                            accept=".jpg, .jpeg, .png"
                            class="file-upload"
                            name="image"
                          />
                        </label>
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <input
                          class="form-control mb-2 username"
                          id="inlineFormInput"
                          name="username"
                          placeholder="Change your username here..."
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <textarea
                          class="form-control bio"
                          id="comment"
                          name="bio"
                          placeholder="Add something to your bio here.."
                          rows="5"
                        />
                      </div>
                      <button
                        class="btn btn-outline-primary save"
                        type="submit"
                      >
                        Save Changes
                      </button>
                      <button
                        class="btn btn-outline-danger"
                        type="submit"
                      >
                        Cancel
                      </button>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "onChange": [MockFunction],
                          "onClick": [MockFunction],
                          "onSubmit": [MockFunction],
                          "profile": Object {
                            "bio": "I love sports and tech",
                            "email": "bill.twinomuhwezi@andela.com",
                            "following": false,
                            "image": null,
                            "username": "kabanga",
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "onChange": [MockFunction],
                          "onClick": [MockFunction],
                          "onSubmit": [MockFunction],
                          "profile": Object {
                            "bio": "I love sports and tech",
                            "email": "bill.twinomuhwezi@andela.com",
                            "following": false,
                            "image": null,
                            "username": "kabanga",
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "onChange": [MockFunction],
                    "onClick": [MockFunction],
                    "onSubmit": [MockFunction],
                    "profile": Object {
                      "bio": "I love sports and tech",
                      "email": "bill.twinomuhwezi@andela.com",
                      "following": false,
                      "image": null,
                      "username": "kabanga",
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="container edit-form profile"
                >
                  <form>
                    <div
                      class="form-group profile-field"
                    >
                      <div />
                      <label
                        class="btn btn-outline-primary btn-file"
                      >
                        Change image 
                        <input
                          accept=".jpg, .jpeg, .png"
                          class="file-upload"
                          name="image"
                        />
                      </label>
                    </div>
                    <div
                      class="form-group profile-field"
                    >
                      <input
                        class="form-control mb-2 username"
                        id="inlineFormInput"
                        name="username"
                        placeholder="Change your username here..."
                        type="text"
                      />
                    </div>
                    <div
                      class="form-group profile-field"
                    >
                      <textarea
                        class="form-control bio"
                        id="comment"
                        name="bio"
                        placeholder="Add something to your bio here.."
                        rows="5"
                      />
                    </div>
                    <button
                      class="btn btn-outline-primary save"
                      type="submit"
                    >
                      Save Changes
                    </button>
                    <button
                      class="btn btn-outline-danger"
                      type="submit"
                    >
                      Cancel
                    </button>
                  </form>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "onChange": [MockFunction],
                      "onClick": [MockFunction],
                      "onSubmit": [MockFunction],
                      "profile": Object {
                        "bio": "I love sports and tech",
                        "email": "bill.twinomuhwezi@andela.com",
                        "following": false,
                        "image": null,
                        "username": "kabanga",
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "onChange": [MockFunction],
              "onClick": [MockFunction],
              "onSubmit": [MockFunction],
              "profile": Object {
                "bio": "I love sports and tech",
                "email": "bill.twinomuhwezi@andela.com",
                "following": false,
                "image": null,
                "username": "kabanga",
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container edit-form profile"
                  >
                    <form>
                      <div
                        class="form-group profile-field"
                      >
                        <div />
                        <label
                          class="btn btn-outline-primary btn-file"
                        >
                          Change image 
                          <input
                            accept=".jpg, .jpeg, .png"
                            class="file-upload"
                            name="image"
                          />
                        </label>
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <input
                          class="form-control mb-2 username"
                          id="inlineFormInput"
                          name="username"
                          placeholder="Change your username here..."
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <textarea
                          class="form-control bio"
                          id="comment"
                          name="bio"
                          placeholder="Add something to your bio here.."
                          rows="5"
                        />
                      </div>
                      <button
                        class="btn btn-outline-primary save"
                        type="submit"
                      >
                        Save Changes
                      </button>
                      <button
                        class="btn btn-outline-danger"
                        type="submit"
                      >
                        Cancel
                      </button>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "onChange": [MockFunction],
                          "onClick": [MockFunction],
                          "onSubmit": [MockFunction],
                          "profile": Object {
                            "bio": "I love sports and tech",
                            "email": "bill.twinomuhwezi@andela.com",
                            "following": false,
                            "image": null,
                            "username": "kabanga",
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "onChange": [MockFunction],
                          "onClick": [MockFunction],
                          "onSubmit": [MockFunction],
                          "profile": Object {
                            "bio": "I love sports and tech",
                            "email": "bill.twinomuhwezi@andela.com",
                            "following": false,
                            "image": null,
                            "username": "kabanga",
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "onChange": [MockFunction],
                    "onClick": [MockFunction],
                    "onSubmit": [MockFunction],
                    "profile": Object {
                      "bio": "I love sports and tech",
                      "email": "bill.twinomuhwezi@andela.com",
                      "following": false,
                      "image": null,
                      "username": "kabanga",
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="container edit-form profile"
                >
                  <form>
                    <div
                      class="form-group profile-field"
                    >
                      <div />
                      <label
                        class="btn btn-outline-primary btn-file"
                      >
                        Change image 
                        <input
                          accept=".jpg, .jpeg, .png"
                          class="file-upload"
                          name="image"
                        />
                      </label>
                    </div>
                    <div
                      class="form-group profile-field"
                    >
                      <input
                        class="form-control mb-2 username"
                        id="inlineFormInput"
                        name="username"
                        placeholder="Change your username here..."
                        type="text"
                      />
                    </div>
                    <div
                      class="form-group profile-field"
                    >
                      <textarea
                        class="form-control bio"
                        id="comment"
                        name="bio"
                        placeholder="Add something to your bio here.."
                        rows="5"
                      />
                    </div>
                    <button
                      class="btn btn-outline-primary save"
                      type="submit"
                    >
                      Save Changes
                    </button>
                    <button
                      class="btn btn-outline-danger"
                      type="submit"
                    >
                      Cancel
                    </button>
                  </form>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "onChange": [MockFunction],
                      "onClick": [MockFunction],
                      "onSubmit": [MockFunction],
                      "profile": Object {
                        "bio": "I love sports and tech",
                        "email": "bill.twinomuhwezi@andela.com",
                        "following": false,
                        "image": null,
                        "username": "kabanga",
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "onSubmit": [MockFunction],
                "profile": Object {
                  "bio": "I love sports and tech",
                  "email": "bill.twinomuhwezi@andela.com",
                  "following": false,
                  "image": null,
                  "username": "kabanga",
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "onSubmit": [MockFunction],
                "profile": Object {
                  "bio": "I love sports and tech",
                  "email": "bill.twinomuhwezi@andela.com",
                  "following": false,
                  "image": null,
                  "username": "kabanga",
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "actualDuration": 0,
        "actualStartTime": -1,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 51,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 52,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 53,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 58,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "border": false,
                    "className": "",
                    "color": "#3F51B5",
                    "fixedWidth": false,
                    "flip": null,
                    "icon": "user-circle",
                    "inverse": false,
                    "listItem": false,
                    "mask": null,
                    "pull": null,
                    "pulse": false,
                    "rotation": null,
                    "size": "10x",
                    "spin": false,
                    "symbol": false,
                    "title": "",
                    "transform": null,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "border": false,
                    "className": "",
                    "color": "#3F51B5",
                    "fixedWidth": false,
                    "flip": null,
                    "icon": "user-circle",
                    "inverse": false,
                    "listItem": false,
                    "mask": null,
                    "pull": null,
                    "pulse": false,
                    "rotation": null,
                    "size": "10x",
                    "spin": false,
                    "symbol": false,
                    "title": "",
                    "transform": null,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 0,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <FontAwesomeIcon
                    border={false}
                    className=""
                    color="#3F51B5"
                    fixedWidth={false}
                    flip={null}
                    icon="user-circle"
                    inverse={false}
                    listItem={false}
                    mask={null}
                    pull={null}
                    pulse={false}
                    rotation={null}
                    size="10x"
                    spin={false}
                    symbol={false}
                    title=""
                    transform={null}
                  />,
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <FontAwesomeIcon
                    border={false}
                    className=""
                    color="#3F51B5"
                    fixedWidth={false}
                    flip={null}
                    icon="user-circle"
                    inverse={false}
                    listItem={false}
                    mask={null}
                    pull={null}
                    pulse={false}
                    rotation={null}
                    size="10x"
                    spin={false}
                    symbol={false}
                    title=""
                    transform={null}
                  />,
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 59,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 61,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": "Change image ",
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": "Change image ",
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "elementType": "input",
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "accept": ".jpg, .jpeg, .png",
                        "className": "file-upload",
                        "name": "image",
                        "onClick": undefined,
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "accept": ".jpg, .jpeg, .png",
                        "className": "file-upload",
                        "name": "image",
                        "onClick": undefined,
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <input
                        accept=".jpg, .jpeg, .png"
                        class="file-upload"
                        name="image"
                      />,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "stateNode": Change image ,
                    "tag": 6,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "elementType": "label",
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      "Change image ",
                      <input
                        accept=".jpg, .jpeg, .png"
                        className="file-upload"
                        name="image"
                      />,
                    ],
                    "className": "btn btn-outline-primary btn-file",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      "Change image ",
                      <input
                        accept=".jpg, .jpeg, .png"
                        className="file-upload"
                        name="image"
                      />,
                    ],
                    "className": "btn btn-outline-primary btn-file",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <label
                    class="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      class="file-upload"
                      name="image"
                    />
                  </label>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "label",
                  "updateQueue": null,
                },
                "stateNode": <div />,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": "div",
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      color="#3F51B5"
                      fixedWidth={false}
                      flip={null}
                      icon="user-circle"
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size="10x"
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />
                  </div>,
                  <label
                    className="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      className="file-upload"
                      name="image"
                    />
                  </label>,
                ],
                "className": "form-group profile-field",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      color="#3F51B5"
                      fixedWidth={false}
                      flip={null}
                      icon="user-circle"
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size="10x"
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />
                  </div>,
                  <label
                    className="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      className="file-upload"
                      name="image"
                    />
                  </label>,
                ],
                "className": "form-group profile-field",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": FiberNode {
                "_debugID": 54,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 63,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "elementType": "input",
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "className": "form-control mb-2 username",
                    "id": "inlineFormInput",
                    "name": "username",
                    "onChange": [MockFunction],
                    "placeholder": "Change your username here...",
                    "type": "text",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "className": "form-control mb-2 username",
                    "id": "inlineFormInput",
                    "name": "username",
                    "onChange": [MockFunction],
                    "placeholder": "Change your username here...",
                    "type": "text",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <input
                    class="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    placeholder="Change your username here..."
                    type="text"
                  />,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "input",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <input
                    className="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    onChange={[MockFunction]}
                    placeholder="Change your username here..."
                    type="text"
                  />,
                  "className": "form-group profile-field",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <input
                    className="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    onChange={[MockFunction]}
                    placeholder="Change your username here..."
                    type="text"
                  />,
                  "className": "form-group profile-field",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 55,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 64,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "elementType": "textarea",
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "form-control bio",
                      "id": "comment",
                      "name": "bio",
                      "onChange": [MockFunction],
                      "placeholder": "Add something to your bio here..",
                      "rows": "5",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "form-control bio",
                      "id": "comment",
                      "name": "bio",
                      "onChange": [MockFunction],
                      "placeholder": "Add something to your bio here..",
                      "rows": "5",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <textarea
                      class="form-control bio"
                      id="comment"
                      name="bio"
                      placeholder="Add something to your bio here.."
                      rows="5"
                    />,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "textarea",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 2,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <textarea
                      className="form-control bio"
                      id="comment"
                      name="bio"
                      onChange={[MockFunction]}
                      placeholder="Add something to your bio here.."
                      rows="5"
                    />,
                    "className": "form-group profile-field",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <textarea
                      className="form-control bio"
                      id="comment"
                      name="bio"
                      onChange={[MockFunction]}
                      placeholder="Add something to your bio here.."
                      rows="5"
                    />,
                    "className": "form-group profile-field",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "elementType": "button",
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 3,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Save Changes",
                      "className": "btn btn-outline-primary save",
                      "onClick": [MockFunction],
                      "type": "submit",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Save Changes",
                      "className": "btn btn-outline-primary save",
                      "onClick": [MockFunction],
                      "type": "submit",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 57,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "elementType": "button",
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 4,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Cancel",
                        "className": "btn btn-outline-danger",
                        "onClick": [MockFunction],
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Cancel",
                        "className": "btn btn-outline-danger",
                        "onClick": [MockFunction],
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <button
                        class="btn btn-outline-danger"
                        type="submit"
                      >
                        Cancel
                      </button>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <button
                      class="btn btn-outline-primary save"
                      type="submit"
                    >
                      Save Changes
                    </button>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "button",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="form-group profile-field"
                  >
                    <textarea
                      class="form-control bio"
                      id="comment"
                      name="bio"
                      placeholder="Add something to your bio here.."
                      rows="5"
                    />
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <div
                  class="form-group profile-field"
                >
                  <input
                    class="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    placeholder="Change your username here..."
                    type="text"
                  />
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "stateNode": <div
                class="form-group profile-field"
              >
                <div />
                <label
                  class="btn btn-outline-primary btn-file"
                >
                  Change image 
                  <input
                    accept=".jpg, .jpeg, .png"
                    class="file-upload"
                    name="image"
                  />
                </label>
              </div>,
              "tag": 5,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 0,
            "elementType": "form",
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <div
                  className="form-group profile-field"
                >
                  <div>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      color="#3F51B5"
                      fixedWidth={false}
                      flip={null}
                      icon="user-circle"
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size="10x"
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />
                  </div>
                  <label
                    className="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      className="file-upload"
                      name="image"
                    />
                  </label>
                </div>,
                <div
                  className="form-group profile-field"
                >
                  <input
                    className="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    onChange={[MockFunction]}
                    placeholder="Change your username here..."
                    type="text"
                  />
                </div>,
                <div
                  className="form-group profile-field"
                >
                  <textarea
                    className="form-control bio"
                    id="comment"
                    name="bio"
                    onChange={[MockFunction]}
                    placeholder="Add something to your bio here.."
                    rows="5"
                  />
                </div>,
                <button
                  className="btn btn-outline-primary save"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Save Changes
                </button>,
                <button
                  className="btn btn-outline-danger"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Cancel
                </button>,
              ],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <div
                  className="form-group profile-field"
                >
                  <div>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      color="#3F51B5"
                      fixedWidth={false}
                      flip={null}
                      icon="user-circle"
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size="10x"
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />
                  </div>
                  <label
                    className="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      className="file-upload"
                      name="image"
                    />
                  </label>
                </div>,
                <div
                  className="form-group profile-field"
                >
                  <input
                    className="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    onChange={[MockFunction]}
                    placeholder="Change your username here..."
                    type="text"
                  />
                </div>,
                <div
                  className="form-group profile-field"
                >
                  <textarea
                    className="form-control bio"
                    id="comment"
                    name="bio"
                    onChange={[MockFunction]}
                    placeholder="Add something to your bio here.."
                    rows="5"
                  />
                </div>,
                <button
                  className="btn btn-outline-primary save"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Save Changes
                </button>,
                <button
                  className="btn btn-outline-danger"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Cancel
                </button>,
              ],
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <form>
              <div
                class="form-group profile-field"
              >
                <div />
                <label
                  class="btn btn-outline-primary btn-file"
                >
                  Change image 
                  <input
                    accept=".jpg, .jpeg, .png"
                    class="file-upload"
                    name="image"
                  />
                </label>
              </div>
              <div
                class="form-group profile-field"
              >
                <input
                  class="form-control mb-2 username"
                  id="inlineFormInput"
                  name="username"
                  placeholder="Change your username here..."
                  type="text"
                />
              </div>
              <div
                class="form-group profile-field"
              >
                <textarea
                  class="form-control bio"
                  id="comment"
                  name="bio"
                  placeholder="Add something to your bio here.."
                  rows="5"
                />
              </div>
              <button
                class="btn btn-outline-primary save"
                type="submit"
              >
                Save Changes
              </button>
              <button
                class="btn btn-outline-danger"
                type="submit"
              >
                Cancel
              </button>
            </form>,
            "tag": 5,
            "treeBaseDuration": 0,
            "type": "form",
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 0,
          "elementType": "div",
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": <form>
              <div
                className="form-group profile-field"
              >
                <div>
                  <FontAwesomeIcon
                    border={false}
                    className=""
                    color="#3F51B5"
                    fixedWidth={false}
                    flip={null}
                    icon="user-circle"
                    inverse={false}
                    listItem={false}
                    mask={null}
                    pull={null}
                    pulse={false}
                    rotation={null}
                    size="10x"
                    spin={false}
                    symbol={false}
                    title=""
                    transform={null}
                  />
                </div>
                <label
                  className="btn btn-outline-primary btn-file"
                >
                  Change image 
                  <input
                    accept=".jpg, .jpeg, .png"
                    className="file-upload"
                    name="image"
                  />
                </label>
              </div>
              <div
                className="form-group profile-field"
              >
                <input
                  className="form-control mb-2 username"
                  id="inlineFormInput"
                  name="username"
                  onChange={[MockFunction]}
                  placeholder="Change your username here..."
                  type="text"
                />
              </div>
              <div
                className="form-group profile-field"
              >
                <textarea
                  className="form-control bio"
                  id="comment"
                  name="bio"
                  onChange={[MockFunction]}
                  placeholder="Add something to your bio here.."
                  rows="5"
                />
              </div>
              <button
                className="btn btn-outline-primary save"
                onClick={[MockFunction]}
                type="submit"
              >
                Save Changes
              </button>
              <button
                className="btn btn-outline-danger"
                onClick={[MockFunction]}
                type="submit"
              >
                Cancel
              </button>
            </form>,
            "className": "container edit-form profile",
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <form>
              <div
                className="form-group profile-field"
              >
                <div>
                  <FontAwesomeIcon
                    border={false}
                    className=""
                    color="#3F51B5"
                    fixedWidth={false}
                    flip={null}
                    icon="user-circle"
                    inverse={false}
                    listItem={false}
                    mask={null}
                    pull={null}
                    pulse={false}
                    rotation={null}
                    size="10x"
                    spin={false}
                    symbol={false}
                    title=""
                    transform={null}
                  />
                </div>
                <label
                  className="btn btn-outline-primary btn-file"
                >
                  Change image 
                  <input
                    accept=".jpg, .jpeg, .png"
                    className="file-upload"
                    name="image"
                  />
                </label>
              </div>
              <div
                className="form-group profile-field"
              >
                <input
                  className="form-control mb-2 username"
                  id="inlineFormInput"
                  name="username"
                  onChange={[MockFunction]}
                  placeholder="Change your username here..."
                  type="text"
                />
              </div>
              <div
                className="form-group profile-field"
              >
                <textarea
                  className="form-control bio"
                  id="comment"
                  name="bio"
                  onChange={[MockFunction]}
                  placeholder="Add something to your bio here.."
                  rows="5"
                />
              </div>
              <button
                className="btn btn-outline-primary save"
                onClick={[MockFunction]}
                type="submit"
              >
                Save Changes
              </button>
              <button
                className="btn btn-outline-danger"
                onClick={[MockFunction]}
                type="submit"
              >
                Cancel
              </button>
            </form>,
            "className": "container edit-form profile",
          },
          "ref": null,
          "return": [Circular],
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": <div
            class="container edit-form profile"
          >
            <form>
              <div
                class="form-group profile-field"
              >
                <div />
                <label
                  class="btn btn-outline-primary btn-file"
                >
                  Change image 
                  <input
                    accept=".jpg, .jpeg, .png"
                    class="file-upload"
                    name="image"
                  />
                </label>
              </div>
              <div
                class="form-group profile-field"
              >
                <input
                  class="form-control mb-2 username"
                  id="inlineFormInput"
                  name="username"
                  placeholder="Change your username here..."
                  type="text"
                />
              </div>
              <div
                class="form-group profile-field"
              >
                <textarea
                  class="form-control bio"
                  id="comment"
                  name="bio"
                  placeholder="Add something to your bio here.."
                  rows="5"
                />
              </div>
              <button
                class="btn btn-outline-primary save"
                type="submit"
              >
                Save Changes
              </button>
              <button
                class="btn btn-outline-danger"
                type="submit"
              >
                Cancel
              </button>
            </form>
          </div>,
          "tag": 5,
          "treeBaseDuration": 0,
          "type": "div",
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "effectTag": 1,
        "elementType": [Function],
        "expirationTime": 0,
        "firstContextDependency": null,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "onChange": [MockFunction],
          "onClick": [MockFunction],
          "onSubmit": [MockFunction],
          "profile": Object {
            "bio": "I love sports and tech",
            "email": "bill.twinomuhwezi@andela.com",
            "following": false,
            "image": null,
            "username": "kabanga",
          },
        },
        "memoizedState": null,
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "onChange": [MockFunction],
          "onClick": [MockFunction],
          "onSubmit": [MockFunction],
          "profile": Object {
            "bio": "I love sports and tech",
            "email": "bill.twinomuhwezi@andela.com",
            "following": false,
            "image": null,
            "username": "kabanga",
          },
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 49,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "onChange": [MockFunction],
              "onClick": [MockFunction],
              "onSubmit": [MockFunction],
              "profile": Object {
                "bio": "I love sports and tech",
                "email": "bill.twinomuhwezi@andela.com",
                "following": false,
                "image": null,
                "username": "kabanga",
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "onChange": [MockFunction],
              "onClick": [MockFunction],
              "onSubmit": [MockFunction],
              "profile": Object {
                "bio": "I love sports and tech",
                "email": "bill.twinomuhwezi@andela.com",
                "following": false,
                "image": null,
                "username": "kabanga",
              },
            },
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container edit-form profile"
                  >
                    <form>
                      <div
                        class="form-group profile-field"
                      >
                        <div />
                        <label
                          class="btn btn-outline-primary btn-file"
                        >
                          Change image 
                          <input
                            accept=".jpg, .jpeg, .png"
                            class="file-upload"
                            name="image"
                          />
                        </label>
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <input
                          class="form-control mb-2 username"
                          id="inlineFormInput"
                          name="username"
                          placeholder="Change your username here..."
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <textarea
                          class="form-control bio"
                          id="comment"
                          name="bio"
                          placeholder="Add something to your bio here.."
                          rows="5"
                        />
                      </div>
                      <button
                        class="btn btn-outline-primary save"
                        type="submit"
                      >
                        Save Changes
                      </button>
                      <button
                        class="btn btn-outline-danger"
                        type="submit"
                      >
                        Cancel
                      </button>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "onChange": [MockFunction],
                          "onClick": [MockFunction],
                          "onSubmit": [MockFunction],
                          "profile": Object {
                            "bio": "I love sports and tech",
                            "email": "bill.twinomuhwezi@andela.com",
                            "following": false,
                            "image": null,
                            "username": "kabanga",
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "onChange": [MockFunction],
                          "onClick": [MockFunction],
                          "onSubmit": [MockFunction],
                          "profile": Object {
                            "bio": "I love sports and tech",
                            "email": "bill.twinomuhwezi@andela.com",
                            "following": false,
                            "image": null,
                            "username": "kabanga",
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "onChange": [MockFunction],
                    "onClick": [MockFunction],
                    "onSubmit": [MockFunction],
                    "profile": Object {
                      "bio": "I love sports and tech",
                      "email": "bill.twinomuhwezi@andela.com",
                      "following": false,
                      "image": null,
                      "username": "kabanga",
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="container edit-form profile"
                >
                  <form>
                    <div
                      class="form-group profile-field"
                    >
                      <div />
                      <label
                        class="btn btn-outline-primary btn-file"
                      >
                        Change image 
                        <input
                          accept=".jpg, .jpeg, .png"
                          class="file-upload"
                          name="image"
                        />
                      </label>
                    </div>
                    <div
                      class="form-group profile-field"
                    >
                      <input
                        class="form-control mb-2 username"
                        id="inlineFormInput"
                        name="username"
                        placeholder="Change your username here..."
                        type="text"
                      />
                    </div>
                    <div
                      class="form-group profile-field"
                    >
                      <textarea
                        class="form-control bio"
                        id="comment"
                        name="bio"
                        placeholder="Add something to your bio here.."
                        rows="5"
                      />
                    </div>
                    <button
                      class="btn btn-outline-primary save"
                      type="submit"
                    >
                      Save Changes
                    </button>
                    <button
                      class="btn btn-outline-danger"
                      type="submit"
                    >
                      Cancel
                    </button>
                  </form>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "onChange": [MockFunction],
                      "onClick": [MockFunction],
                      "onSubmit": [MockFunction],
                      "profile": Object {
                        "bio": "I love sports and tech",
                        "email": "bill.twinomuhwezi@andela.com",
                        "following": false,
                        "image": null,
                        "username": "kabanga",
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "onChange": [MockFunction],
              "onClick": [MockFunction],
              "onSubmit": [MockFunction],
              "profile": Object {
                "bio": "I love sports and tech",
                "email": "bill.twinomuhwezi@andela.com",
                "following": false,
                "image": null,
                "username": "kabanga",
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container edit-form profile"
                  >
                    <form>
                      <div
                        class="form-group profile-field"
                      >
                        <div />
                        <label
                          class="btn btn-outline-primary btn-file"
                        >
                          Change image 
                          <input
                            accept=".jpg, .jpeg, .png"
                            class="file-upload"
                            name="image"
                          />
                        </label>
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <input
                          class="form-control mb-2 username"
                          id="inlineFormInput"
                          name="username"
                          placeholder="Change your username here..."
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <textarea
                          class="form-control bio"
                          id="comment"
                          name="bio"
                          placeholder="Add something to your bio here.."
                          rows="5"
                        />
                      </div>
                      <button
                        class="btn btn-outline-primary save"
                        type="submit"
                      >
                        Save Changes
                      </button>
                      <button
                        class="btn btn-outline-danger"
                        type="submit"
                      >
                        Cancel
                      </button>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "onChange": [MockFunction],
                          "onClick": [MockFunction],
                          "onSubmit": [MockFunction],
                          "profile": Object {
                            "bio": "I love sports and tech",
                            "email": "bill.twinomuhwezi@andela.com",
                            "following": false,
                            "image": null,
                            "username": "kabanga",
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "onChange": [MockFunction],
                          "onClick": [MockFunction],
                          "onSubmit": [MockFunction],
                          "profile": Object {
                            "bio": "I love sports and tech",
                            "email": "bill.twinomuhwezi@andela.com",
                            "following": false,
                            "image": null,
                            "username": "kabanga",
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "onChange": [MockFunction],
                    "onClick": [MockFunction],
                    "onSubmit": [MockFunction],
                    "profile": Object {
                      "bio": "I love sports and tech",
                      "email": "bill.twinomuhwezi@andela.com",
                      "following": false,
                      "image": null,
                      "username": "kabanga",
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="container edit-form profile"
                >
                  <form>
                    <div
                      class="form-group profile-field"
                    >
                      <div />
                      <label
                        class="btn btn-outline-primary btn-file"
                      >
                        Change image 
                        <input
                          accept=".jpg, .jpeg, .png"
                          class="file-upload"
                          name="image"
                        />
                      </label>
                    </div>
                    <div
                      class="form-group profile-field"
                    >
                      <input
                        class="form-control mb-2 username"
                        id="inlineFormInput"
                        name="username"
                        placeholder="Change your username here..."
                        type="text"
                      />
                    </div>
                    <div
                      class="form-group profile-field"
                    >
                      <textarea
                        class="form-control bio"
                        id="comment"
                        name="bio"
                        placeholder="Add something to your bio here.."
                        rows="5"
                      />
                    </div>
                    <button
                      class="btn btn-outline-primary save"
                      type="submit"
                    >
                      Save Changes
                    </button>
                    <button
                      class="btn btn-outline-danger"
                      type="submit"
                    >
                      Cancel
                    </button>
                  </form>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "onChange": [MockFunction],
                      "onClick": [MockFunction],
                      "onSubmit": [MockFunction],
                      "profile": Object {
                        "bio": "I love sports and tech",
                        "email": "bill.twinomuhwezi@andela.com",
                        "following": false,
                        "image": null,
                        "username": "kabanga",
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "onSubmit": [MockFunction],
                "profile": Object {
                  "bio": "I love sports and tech",
                  "email": "bill.twinomuhwezi@andela.com",
                  "following": false,
                  "image": null,
                  "username": "kabanga",
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "onSubmit": [MockFunction],
                "profile": Object {
                  "bio": "I love sports and tech",
                  "email": "bill.twinomuhwezi@andela.com",
                  "following": false,
                  "image": null,
                  "username": "kabanga",
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "selfBaseDuration": 0,
        "sibling": null,
        "stateNode": [Circular],
        "tag": 1,
        "treeBaseDuration": 0,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "props": Object {
        "onChange": [MockFunction],
        "onClick": [MockFunction],
        "onSubmit": [MockFunction],
        "profile": Object {
          "bio": "I love sports and tech",
          "email": "bill.twinomuhwezi@andela.com",
          "following": false,
          "image": null,
          "username": "kabanga",
        },
      },
      "refs": Object {},
      "state": null,
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "onChange": [MockFunction],
      "onClick": [MockFunction],
      "onSubmit": [MockFunction],
      "profile": Object {
        "bio": "I love sports and tech",
        "email": "bill.twinomuhwezi@andela.com",
        "following": false,
        "image": null,
        "username": "kabanga",
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": <div
        class="container edit-form profile"
      >
        <form>
          <div
            class="form-group profile-field"
          >
            <div />
            <label
              class="btn btn-outline-primary btn-file"
            >
              Change image 
              <input
                accept=".jpg, .jpeg, .png"
                class="file-upload"
                name="image"
              />
            </label>
          </div>
          <div
            class="form-group profile-field"
          >
            <input
              class="form-control mb-2 username"
              id="inlineFormInput"
              name="username"
              placeholder="Change your username here..."
              type="text"
            />
          </div>
          <div
            class="form-group profile-field"
          >
            <textarea
              class="form-control bio"
              id="comment"
              name="bio"
              placeholder="Add something to your bio here.."
              rows="5"
            />
          </div>
          <button
            class="btn btn-outline-primary save"
            type="submit"
          >
            Save Changes
          </button>
          <button
            class="btn btn-outline-danger"
            type="submit"
          >
            Cancel
          </button>
        </form>
      </div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <form>
          <div
            className="form-group profile-field"
          >
            <div>
              <FontAwesomeIcon
                border={false}
                className=""
                color="#3F51B5"
                fixedWidth={false}
                flip={null}
                icon="user-circle"
                inverse={false}
                listItem={false}
                mask={null}
                pull={null}
                pulse={false}
                rotation={null}
                size="10x"
                spin={false}
                symbol={false}
                title=""
                transform={null}
              />
            </div>
            <label
              className="btn btn-outline-primary btn-file"
            >
              Change image 
              <input
                accept=".jpg, .jpeg, .png"
                className="file-upload"
                name="image"
              />
            </label>
          </div>
          <div
            className="form-group profile-field"
          >
            <input
              className="form-control mb-2 username"
              id="inlineFormInput"
              name="username"
              onChange={[MockFunction]}
              placeholder="Change your username here..."
              type="text"
            />
          </div>
          <div
            className="form-group profile-field"
          >
            <textarea
              className="form-control bio"
              id="comment"
              name="bio"
              onChange={[MockFunction]}
              placeholder="Add something to your bio here.."
              rows="5"
            />
          </div>
          <button
            className="btn btn-outline-primary save"
            onClick={[MockFunction]}
            type="submit"
          >
            Save Changes
          </button>
          <button
            className="btn btn-outline-danger"
            onClick={[MockFunction]}
            type="submit"
          >
            Cancel
          </button>
        </form>,
        "className": "container edit-form profile",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": <form>
            <div
              class="form-group profile-field"
            >
              <div />
              <label
                class="btn btn-outline-primary btn-file"
              >
                Change image 
                <input
                  accept=".jpg, .jpeg, .png"
                  class="file-upload"
                  name="image"
                />
              </label>
            </div>
            <div
              class="form-group profile-field"
            >
              <input
                class="form-control mb-2 username"
                id="inlineFormInput"
                name="username"
                placeholder="Change your username here..."
                type="text"
              />
            </div>
            <div
              class="form-group profile-field"
            >
              <textarea
                class="form-control bio"
                id="comment"
                name="bio"
                placeholder="Add something to your bio here.."
                rows="5"
              />
            </div>
            <button
              class="btn btn-outline-primary save"
              type="submit"
            >
              Save Changes
            </button>
            <button
              class="btn btn-outline-danger"
              type="submit"
            >
              Cancel
            </button>
          </form>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="form-group profile-field"
              >
                <div>
                  <FontAwesomeIcon
                    border={false}
                    className=""
                    color="#3F51B5"
                    fixedWidth={false}
                    flip={null}
                    icon="user-circle"
                    inverse={false}
                    listItem={false}
                    mask={null}
                    pull={null}
                    pulse={false}
                    rotation={null}
                    size="10x"
                    spin={false}
                    symbol={false}
                    title=""
                    transform={null}
                  />
                </div>
                <label
                  className="btn btn-outline-primary btn-file"
                >
                  Change image 
                  <input
                    accept=".jpg, .jpeg, .png"
                    className="file-upload"
                    name="image"
                  />
                </label>
              </div>,
              <div
                className="form-group profile-field"
              >
                <input
                  className="form-control mb-2 username"
                  id="inlineFormInput"
                  name="username"
                  onChange={[MockFunction]}
                  placeholder="Change your username here..."
                  type="text"
                />
              </div>,
              <div
                className="form-group profile-field"
              >
                <textarea
                  className="form-control bio"
                  id="comment"
                  name="bio"
                  onChange={[MockFunction]}
                  placeholder="Add something to your bio here.."
                  rows="5"
                />
              </div>,
              <button
                className="btn btn-outline-primary save"
                onClick={[MockFunction]}
                type="submit"
              >
                Save Changes
              </button>,
              <button
                className="btn btn-outline-danger"
                onClick={[MockFunction]}
                type="submit"
              >
                Cancel
              </button>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <div
                class="form-group profile-field"
              >
                <div />
                <label
                  class="btn btn-outline-primary btn-file"
                >
                  Change image 
                  <input
                    accept=".jpg, .jpeg, .png"
                    class="file-upload"
                    name="image"
                  />
                </label>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      color="#3F51B5"
                      fixedWidth={false}
                      flip={null}
                      icon="user-circle"
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size="10x"
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />
                  </div>,
                  <label
                    className="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      className="file-upload"
                      name="image"
                    />
                  </label>,
                ],
                "className": "form-group profile-field",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <div />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <FontAwesomeIcon
                      border={false}
                      className=""
                      color="#3F51B5"
                      fixedWidth={false}
                      flip={null}
                      icon="user-circle"
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size="10x"
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "border": false,
                        "className": "",
                        "color": "#3F51B5",
                        "fixedWidth": false,
                        "flip": null,
                        "icon": "user-circle",
                        "inverse": false,
                        "listItem": false,
                        "mask": null,
                        "pull": null,
                        "pulse": false,
                        "rotation": null,
                        "size": "10x",
                        "spin": false,
                        "symbol": false,
                        "title": "",
                        "transform": null,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": <label
                    class="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      class="file-upload"
                      name="image"
                    />
                  </label>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Change image ",
                      <input
                        accept=".jpg, .jpeg, .png"
                        className="file-upload"
                        name="image"
                      />,
                    ],
                    "className": "btn btn-outline-primary btn-file",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Change image ",
                    Object {
                      "instance": <input
                        accept=".jpg, .jpeg, .png"
                        class="file-upload"
                        name="image"
                      />,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "accept": ".jpg, .jpeg, .png",
                        "className": "file-upload",
                        "name": "image",
                        "onClick": undefined,
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                      ],
                      "type": "input",
                    },
                  ],
                  "type": "label",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <div
                class="form-group profile-field"
              >
                <input
                  class="form-control mb-2 username"
                  id="inlineFormInput"
                  name="username"
                  placeholder="Change your username here..."
                  type="text"
                />
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <input
                  className="form-control mb-2 username"
                  id="inlineFormInput"
                  name="username"
                  onChange={[MockFunction]}
                  placeholder="Change your username here..."
                  type="text"
                />,
                "className": "form-group profile-field",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <input
                    class="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    placeholder="Change your username here..."
                    type="text"
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "form-control mb-2 username",
                    "id": "inlineFormInput",
                    "name": "username",
                    "onChange": [MockFunction],
                    "placeholder": "Change your username here...",
                    "type": "text",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <div
                class="form-group profile-field"
              >
                <textarea
                  class="form-control bio"
                  id="comment"
                  name="bio"
                  placeholder="Add something to your bio here.."
                  rows="5"
                />
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <textarea
                  className="form-control bio"
                  id="comment"
                  name="bio"
                  onChange={[MockFunction]}
                  placeholder="Add something to your bio here.."
                  rows="5"
                />,
                "className": "form-group profile-field",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <textarea
                    class="form-control bio"
                    id="comment"
                    name="bio"
                    placeholder="Add something to your bio here.."
                    rows="5"
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "form-control bio",
                    "id": "comment",
                    "name": "bio",
                    "onChange": [MockFunction],
                    "placeholder": "Add something to your bio here..",
                    "rows": "5",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "textarea",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <button
                class="btn btn-outline-primary save"
                type="submit"
              >
                Save Changes
              </button>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Save Changes",
                "className": "btn btn-outline-primary save",
                "onClick": [MockFunction],
                "type": "submit",
              },
              "ref": null,
              "rendered": Array [
                "Save Changes",
              ],
              "type": "button",
            },
            Object {
              "instance": <button
                class="btn btn-outline-danger"
                type="submit"
              >
                Cancel
              </button>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Cancel",
                "className": "btn btn-outline-danger",
                "onClick": [MockFunction],
                "type": "submit",
              },
              "ref": null,
              "rendered": Array [
                "Cancel",
              ],
              "type": "button",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": ProfileEdit {
        "_reactInternalFiber": FiberNode {
          "_debugID": 50,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 49,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "onSubmit": [MockFunction],
                "profile": Object {
                  "bio": "I love sports and tech",
                  "email": "bill.twinomuhwezi@andela.com",
                  "following": false,
                  "image": null,
                  "username": "kabanga",
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "onSubmit": [MockFunction],
                "profile": Object {
                  "bio": "I love sports and tech",
                  "email": "bill.twinomuhwezi@andela.com",
                  "following": false,
                  "image": null,
                  "username": "kabanga",
                },
              },
            },
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="container edit-form profile"
                    >
                      <form>
                        <div
                          class="form-group profile-field"
                        >
                          <div />
                          <label
                            class="btn btn-outline-primary btn-file"
                          >
                            Change image 
                            <input
                              accept=".jpg, .jpeg, .png"
                              class="file-upload"
                              name="image"
                            />
                          </label>
                        </div>
                        <div
                          class="form-group profile-field"
                        >
                          <input
                            class="form-control mb-2 username"
                            id="inlineFormInput"
                            name="username"
                            placeholder="Change your username here..."
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group profile-field"
                        >
                          <textarea
                            class="form-control bio"
                            id="comment"
                            name="bio"
                            placeholder="Add something to your bio here.."
                            rows="5"
                          />
                        </div>
                        <button
                          class="btn btn-outline-primary save"
                          type="submit"
                        >
                          Save Changes
                        </button>
                        <button
                          class="btn btn-outline-danger"
                          type="submit"
                        >
                          Cancel
                        </button>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "onChange": [MockFunction],
                            "onClick": [MockFunction],
                            "onSubmit": [MockFunction],
                            "profile": Object {
                              "bio": "I love sports and tech",
                              "email": "bill.twinomuhwezi@andela.com",
                              "following": false,
                              "image": null,
                              "username": "kabanga",
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "onChange": [MockFunction],
                            "onClick": [MockFunction],
                            "onSubmit": [MockFunction],
                            "profile": Object {
                              "bio": "I love sports and tech",
                              "email": "bill.twinomuhwezi@andela.com",
                              "following": false,
                              "image": null,
                              "username": "kabanga",
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "onChange": [MockFunction],
                      "onClick": [MockFunction],
                      "onSubmit": [MockFunction],
                      "profile": Object {
                        "bio": "I love sports and tech",
                        "email": "bill.twinomuhwezi@andela.com",
                        "following": false,
                        "image": null,
                        "username": "kabanga",
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container edit-form profile"
                  >
                    <form>
                      <div
                        class="form-group profile-field"
                      >
                        <div />
                        <label
                          class="btn btn-outline-primary btn-file"
                        >
                          Change image 
                          <input
                            accept=".jpg, .jpeg, .png"
                            class="file-upload"
                            name="image"
                          />
                        </label>
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <input
                          class="form-control mb-2 username"
                          id="inlineFormInput"
                          name="username"
                          placeholder="Change your username here..."
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <textarea
                          class="form-control bio"
                          id="comment"
                          name="bio"
                          placeholder="Add something to your bio here.."
                          rows="5"
                        />
                      </div>
                      <button
                        class="btn btn-outline-primary save"
                        type="submit"
                      >
                        Save Changes
                      </button>
                      <button
                        class="btn btn-outline-danger"
                        type="submit"
                      >
                        Cancel
                      </button>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "onChange": [MockFunction],
                        "onClick": [MockFunction],
                        "onSubmit": [MockFunction],
                        "profile": Object {
                          "bio": "I love sports and tech",
                          "email": "bill.twinomuhwezi@andela.com",
                          "following": false,
                          "image": null,
                          "username": "kabanga",
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "onSubmit": [MockFunction],
                "profile": Object {
                  "bio": "I love sports and tech",
                  "email": "bill.twinomuhwezi@andela.com",
                  "following": false,
                  "image": null,
                  "username": "kabanga",
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="container edit-form profile"
                    >
                      <form>
                        <div
                          class="form-group profile-field"
                        >
                          <div />
                          <label
                            class="btn btn-outline-primary btn-file"
                          >
                            Change image 
                            <input
                              accept=".jpg, .jpeg, .png"
                              class="file-upload"
                              name="image"
                            />
                          </label>
                        </div>
                        <div
                          class="form-group profile-field"
                        >
                          <input
                            class="form-control mb-2 username"
                            id="inlineFormInput"
                            name="username"
                            placeholder="Change your username here..."
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group profile-field"
                        >
                          <textarea
                            class="form-control bio"
                            id="comment"
                            name="bio"
                            placeholder="Add something to your bio here.."
                            rows="5"
                          />
                        </div>
                        <button
                          class="btn btn-outline-primary save"
                          type="submit"
                        >
                          Save Changes
                        </button>
                        <button
                          class="btn btn-outline-danger"
                          type="submit"
                        >
                          Cancel
                        </button>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "onChange": [MockFunction],
                            "onClick": [MockFunction],
                            "onSubmit": [MockFunction],
                            "profile": Object {
                              "bio": "I love sports and tech",
                              "email": "bill.twinomuhwezi@andela.com",
                              "following": false,
                              "image": null,
                              "username": "kabanga",
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "onChange": [MockFunction],
                            "onClick": [MockFunction],
                            "onSubmit": [MockFunction],
                            "profile": Object {
                              "bio": "I love sports and tech",
                              "email": "bill.twinomuhwezi@andela.com",
                              "following": false,
                              "image": null,
                              "username": "kabanga",
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "onChange": [MockFunction],
                      "onClick": [MockFunction],
                      "onSubmit": [MockFunction],
                      "profile": Object {
                        "bio": "I love sports and tech",
                        "email": "bill.twinomuhwezi@andela.com",
                        "following": false,
                        "image": null,
                        "username": "kabanga",
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container edit-form profile"
                  >
                    <form>
                      <div
                        class="form-group profile-field"
                      >
                        <div />
                        <label
                          class="btn btn-outline-primary btn-file"
                        >
                          Change image 
                          <input
                            accept=".jpg, .jpeg, .png"
                            class="file-upload"
                            name="image"
                          />
                        </label>
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <input
                          class="form-control mb-2 username"
                          id="inlineFormInput"
                          name="username"
                          placeholder="Change your username here..."
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <textarea
                          class="form-control bio"
                          id="comment"
                          name="bio"
                          placeholder="Add something to your bio here.."
                          rows="5"
                        />
                      </div>
                      <button
                        class="btn btn-outline-primary save"
                        type="submit"
                      >
                        Save Changes
                      </button>
                      <button
                        class="btn btn-outline-danger"
                        type="submit"
                      >
                        Cancel
                      </button>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "onChange": [MockFunction],
                        "onClick": [MockFunction],
                        "onSubmit": [MockFunction],
                        "profile": Object {
                          "bio": "I love sports and tech",
                          "email": "bill.twinomuhwezi@andela.com",
                          "following": false,
                          "image": null,
                          "username": "kabanga",
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "onChange": [MockFunction],
                  "onClick": [MockFunction],
                  "onSubmit": [MockFunction],
                  "profile": Object {
                    "bio": "I love sports and tech",
                    "email": "bill.twinomuhwezi@andela.com",
                    "following": false,
                    "image": null,
                    "username": "kabanga",
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "onChange": [MockFunction],
                  "onClick": [MockFunction],
                  "onSubmit": [MockFunction],
                  "profile": Object {
                    "bio": "I love sports and tech",
                    "email": "bill.twinomuhwezi@andela.com",
                    "following": false,
                    "image": null,
                    "username": "kabanga",
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 51,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 52,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 53,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 58,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 1,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "border": false,
                      "className": "",
                      "color": "#3F51B5",
                      "fixedWidth": false,
                      "flip": null,
                      "icon": "user-circle",
                      "inverse": false,
                      "listItem": false,
                      "mask": null,
                      "pull": null,
                      "pulse": false,
                      "rotation": null,
                      "size": "10x",
                      "spin": false,
                      "symbol": false,
                      "title": "",
                      "transform": null,
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "border": false,
                      "className": "",
                      "color": "#3F51B5",
                      "fixedWidth": false,
                      "flip": null,
                      "icon": "user-circle",
                      "inverse": false,
                      "listItem": false,
                      "mask": null,
                      "pull": null,
                      "pulse": false,
                      "rotation": null,
                      "size": "10x",
                      "spin": false,
                      "symbol": false,
                      "title": "",
                      "transform": null,
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 0,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <FontAwesomeIcon
                      border={false}
                      className=""
                      color="#3F51B5"
                      fixedWidth={false}
                      flip={null}
                      icon="user-circle"
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size="10x"
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />,
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <FontAwesomeIcon
                      border={false}
                      className=""
                      color="#3F51B5"
                      fixedWidth={false}
                      flip={null}
                      icon="user-circle"
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size="10x"
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />,
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 59,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 61,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": "Change image ",
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": "Change image ",
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "elementType": "input",
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "accept": ".jpg, .jpeg, .png",
                          "className": "file-upload",
                          "name": "image",
                          "onClick": undefined,
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "accept": ".jpg, .jpeg, .png",
                          "className": "file-upload",
                          "name": "image",
                          "onClick": undefined,
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <input
                          accept=".jpg, .jpeg, .png"
                          class="file-upload"
                          name="image"
                        />,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "stateNode": Change image ,
                      "tag": 6,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "elementType": "label",
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        "Change image ",
                        <input
                          accept=".jpg, .jpeg, .png"
                          className="file-upload"
                          name="image"
                        />,
                      ],
                      "className": "btn btn-outline-primary btn-file",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        "Change image ",
                        <input
                          accept=".jpg, .jpeg, .png"
                          className="file-upload"
                          name="image"
                        />,
                      ],
                      "className": "btn btn-outline-primary btn-file",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <label
                      class="btn btn-outline-primary btn-file"
                    >
                      Change image 
                      <input
                        accept=".jpg, .jpeg, .png"
                        class="file-upload"
                        name="image"
                      />
                    </label>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "label",
                    "updateQueue": null,
                  },
                  "stateNode": <div />,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div>
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        color="#3F51B5"
                        fixedWidth={false}
                        flip={null}
                        icon="user-circle"
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size="10x"
                        spin={false}
                        symbol={false}
                        title=""
                        transform={null}
                      />
                    </div>,
                    <label
                      className="btn btn-outline-primary btn-file"
                    >
                      Change image 
                      <input
                        accept=".jpg, .jpeg, .png"
                        className="file-upload"
                        name="image"
                      />
                    </label>,
                  ],
                  "className": "form-group profile-field",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div>
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        color="#3F51B5"
                        fixedWidth={false}
                        flip={null}
                        icon="user-circle"
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size="10x"
                        spin={false}
                        symbol={false}
                        title=""
                        transform={null}
                      />
                    </div>,
                    <label
                      className="btn btn-outline-primary btn-file"
                    >
                      Change image 
                      <input
                        accept=".jpg, .jpeg, .png"
                        className="file-upload"
                        name="image"
                      />
                    </label>,
                  ],
                  "className": "form-group profile-field",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 54,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 63,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "elementType": "input",
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "form-control mb-2 username",
                      "id": "inlineFormInput",
                      "name": "username",
                      "onChange": [MockFunction],
                      "placeholder": "Change your username here...",
                      "type": "text",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "form-control mb-2 username",
                      "id": "inlineFormInput",
                      "name": "username",
                      "onChange": [MockFunction],
                      "placeholder": "Change your username here...",
                      "type": "text",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <input
                      class="form-control mb-2 username"
                      id="inlineFormInput"
                      name="username"
                      placeholder="Change your username here..."
                      type="text"
                    />,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "input",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <input
                      className="form-control mb-2 username"
                      id="inlineFormInput"
                      name="username"
                      onChange={[MockFunction]}
                      placeholder="Change your username here..."
                      type="text"
                    />,
                    "className": "form-group profile-field",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <input
                      className="form-control mb-2 username"
                      id="inlineFormInput"
                      name="username"
                      onChange={[MockFunction]}
                      placeholder="Change your username here..."
                      type="text"
                    />,
                    "className": "form-group profile-field",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 55,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 64,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "elementType": "textarea",
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "form-control bio",
                        "id": "comment",
                        "name": "bio",
                        "onChange": [MockFunction],
                        "placeholder": "Add something to your bio here..",
                        "rows": "5",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "className": "form-control bio",
                        "id": "comment",
                        "name": "bio",
                        "onChange": [MockFunction],
                        "placeholder": "Add something to your bio here..",
                        "rows": "5",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <textarea
                        class="form-control bio"
                        id="comment"
                        name="bio"
                        placeholder="Add something to your bio here.."
                        rows="5"
                      />,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "textarea",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <textarea
                        className="form-control bio"
                        id="comment"
                        name="bio"
                        onChange={[MockFunction]}
                        placeholder="Add something to your bio here.."
                        rows="5"
                      />,
                      "className": "form-group profile-field",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <textarea
                        className="form-control bio"
                        id="comment"
                        name="bio"
                        onChange={[MockFunction]}
                        placeholder="Add something to your bio here.."
                        rows="5"
                      />,
                      "className": "form-group profile-field",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "elementType": "button",
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 3,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Save Changes",
                        "className": "btn btn-outline-primary save",
                        "onClick": [MockFunction],
                        "type": "submit",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Save Changes",
                        "className": "btn btn-outline-primary save",
                        "onClick": [MockFunction],
                        "type": "submit",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 57,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "elementType": "button",
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 4,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Cancel",
                          "className": "btn btn-outline-danger",
                          "onClick": [MockFunction],
                          "type": "submit",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Cancel",
                          "className": "btn btn-outline-danger",
                          "onClick": [MockFunction],
                          "type": "submit",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <button
                          class="btn btn-outline-danger"
                          type="submit"
                        >
                          Cancel
                        </button>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "button",
                        "updateQueue": null,
                      },
                      "stateNode": <button
                        class="btn btn-outline-primary save"
                        type="submit"
                      >
                        Save Changes
                      </button>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "button",
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="form-group profile-field"
                    >
                      <textarea
                        class="form-control bio"
                        id="comment"
                        name="bio"
                        placeholder="Add something to your bio here.."
                        rows="5"
                      />
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="form-group profile-field"
                  >
                    <input
                      class="form-control mb-2 username"
                      id="inlineFormInput"
                      name="username"
                      placeholder="Change your username here..."
                      type="text"
                    />
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <div
                  class="form-group profile-field"
                >
                  <div />
                  <label
                    class="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      class="file-upload"
                      name="image"
                    />
                  </label>
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": "form",
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div
                    className="form-group profile-field"
                  >
                    <div>
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        color="#3F51B5"
                        fixedWidth={false}
                        flip={null}
                        icon="user-circle"
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size="10x"
                        spin={false}
                        symbol={false}
                        title=""
                        transform={null}
                      />
                    </div>
                    <label
                      className="btn btn-outline-primary btn-file"
                    >
                      Change image 
                      <input
                        accept=".jpg, .jpeg, .png"
                        className="file-upload"
                        name="image"
                      />
                    </label>
                  </div>,
                  <div
                    className="form-group profile-field"
                  >
                    <input
                      className="form-control mb-2 username"
                      id="inlineFormInput"
                      name="username"
                      onChange={[MockFunction]}
                      placeholder="Change your username here..."
                      type="text"
                    />
                  </div>,
                  <div
                    className="form-group profile-field"
                  >
                    <textarea
                      className="form-control bio"
                      id="comment"
                      name="bio"
                      onChange={[MockFunction]}
                      placeholder="Add something to your bio here.."
                      rows="5"
                    />
                  </div>,
                  <button
                    className="btn btn-outline-primary save"
                    onClick={[MockFunction]}
                    type="submit"
                  >
                    Save Changes
                  </button>,
                  <button
                    className="btn btn-outline-danger"
                    onClick={[MockFunction]}
                    type="submit"
                  >
                    Cancel
                  </button>,
                ],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div
                    className="form-group profile-field"
                  >
                    <div>
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        color="#3F51B5"
                        fixedWidth={false}
                        flip={null}
                        icon="user-circle"
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size="10x"
                        spin={false}
                        symbol={false}
                        title=""
                        transform={null}
                      />
                    </div>
                    <label
                      className="btn btn-outline-primary btn-file"
                    >
                      Change image 
                      <input
                        accept=".jpg, .jpeg, .png"
                        className="file-upload"
                        name="image"
                      />
                    </label>
                  </div>,
                  <div
                    className="form-group profile-field"
                  >
                    <input
                      className="form-control mb-2 username"
                      id="inlineFormInput"
                      name="username"
                      onChange={[MockFunction]}
                      placeholder="Change your username here..."
                      type="text"
                    />
                  </div>,
                  <div
                    className="form-group profile-field"
                  >
                    <textarea
                      className="form-control bio"
                      id="comment"
                      name="bio"
                      onChange={[MockFunction]}
                      placeholder="Add something to your bio here.."
                      rows="5"
                    />
                  </div>,
                  <button
                    className="btn btn-outline-primary save"
                    onClick={[MockFunction]}
                    type="submit"
                  >
                    Save Changes
                  </button>,
                  <button
                    className="btn btn-outline-danger"
                    onClick={[MockFunction]}
                    type="submit"
                  >
                    Cancel
                  </button>,
                ],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <form>
                <div
                  class="form-group profile-field"
                >
                  <div />
                  <label
                    class="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      class="file-upload"
                      name="image"
                    />
                  </label>
                </div>
                <div
                  class="form-group profile-field"
                >
                  <input
                    class="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    placeholder="Change your username here..."
                    type="text"
                  />
                </div>
                <div
                  class="form-group profile-field"
                >
                  <textarea
                    class="form-control bio"
                    id="comment"
                    name="bio"
                    placeholder="Add something to your bio here.."
                    rows="5"
                  />
                </div>
                <button
                  class="btn btn-outline-primary save"
                  type="submit"
                >
                  Save Changes
                </button>
                <button
                  class="btn btn-outline-danger"
                  type="submit"
                >
                  Cancel
                </button>
              </form>,
              "tag": 5,
              "treeBaseDuration": 0,
              "type": "form",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 0,
            "elementType": "div",
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <form>
                <div
                  className="form-group profile-field"
                >
                  <div>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      color="#3F51B5"
                      fixedWidth={false}
                      flip={null}
                      icon="user-circle"
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size="10x"
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />
                  </div>
                  <label
                    className="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      className="file-upload"
                      name="image"
                    />
                  </label>
                </div>
                <div
                  className="form-group profile-field"
                >
                  <input
                    className="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    onChange={[MockFunction]}
                    placeholder="Change your username here..."
                    type="text"
                  />
                </div>
                <div
                  className="form-group profile-field"
                >
                  <textarea
                    className="form-control bio"
                    id="comment"
                    name="bio"
                    onChange={[MockFunction]}
                    placeholder="Add something to your bio here.."
                    rows="5"
                  />
                </div>
                <button
                  className="btn btn-outline-primary save"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Save Changes
                </button>
                <button
                  className="btn btn-outline-danger"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Cancel
                </button>
              </form>,
              "className": "container edit-form profile",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <form>
                <div
                  className="form-group profile-field"
                >
                  <div>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      color="#3F51B5"
                      fixedWidth={false}
                      flip={null}
                      icon="user-circle"
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size="10x"
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />
                  </div>
                  <label
                    className="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      className="file-upload"
                      name="image"
                    />
                  </label>
                </div>
                <div
                  className="form-group profile-field"
                >
                  <input
                    className="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    onChange={[MockFunction]}
                    placeholder="Change your username here..."
                    type="text"
                  />
                </div>
                <div
                  className="form-group profile-field"
                >
                  <textarea
                    className="form-control bio"
                    id="comment"
                    name="bio"
                    onChange={[MockFunction]}
                    placeholder="Add something to your bio here.."
                    rows="5"
                  />
                </div>
                <button
                  className="btn btn-outline-primary save"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Save Changes
                </button>
                <button
                  className="btn btn-outline-danger"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Cancel
                </button>
              </form>,
              "className": "container edit-form profile",
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <div
              class="container edit-form profile"
            >
              <form>
                <div
                  class="form-group profile-field"
                >
                  <div />
                  <label
                    class="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      class="file-upload"
                      name="image"
                    />
                  </label>
                </div>
                <div
                  class="form-group profile-field"
                >
                  <input
                    class="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    placeholder="Change your username here..."
                    type="text"
                  />
                </div>
                <div
                  class="form-group profile-field"
                >
                  <textarea
                    class="form-control bio"
                    id="comment"
                    name="bio"
                    placeholder="Add something to your bio here.."
                    rows="5"
                  />
                </div>
                <button
                  class="btn btn-outline-primary save"
                  type="submit"
                >
                  Save Changes
                </button>
                <button
                  class="btn btn-outline-danger"
                  type="submit"
                >
                  Cancel
                </button>
              </form>
            </div>,
            "tag": 5,
            "treeBaseDuration": 0,
            "type": "div",
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "onChange": [MockFunction],
            "onClick": [MockFunction],
            "onSubmit": [MockFunction],
            "profile": Object {
              "bio": "I love sports and tech",
              "email": "bill.twinomuhwezi@andela.com",
              "following": false,
              "image": null,
              "username": "kabanga",
            },
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "onChange": [MockFunction],
            "onClick": [MockFunction],
            "onSubmit": [MockFunction],
            "profile": Object {
              "bio": "I love sports and tech",
              "email": "bill.twinomuhwezi@andela.com",
              "following": false,
              "image": null,
              "username": "kabanga",
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 49,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "onSubmit": [MockFunction],
                "profile": Object {
                  "bio": "I love sports and tech",
                  "email": "bill.twinomuhwezi@andela.com",
                  "following": false,
                  "image": null,
                  "username": "kabanga",
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "onSubmit": [MockFunction],
                "profile": Object {
                  "bio": "I love sports and tech",
                  "email": "bill.twinomuhwezi@andela.com",
                  "following": false,
                  "image": null,
                  "username": "kabanga",
                },
              },
            },
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="container edit-form profile"
                    >
                      <form>
                        <div
                          class="form-group profile-field"
                        >
                          <div />
                          <label
                            class="btn btn-outline-primary btn-file"
                          >
                            Change image 
                            <input
                              accept=".jpg, .jpeg, .png"
                              class="file-upload"
                              name="image"
                            />
                          </label>
                        </div>
                        <div
                          class="form-group profile-field"
                        >
                          <input
                            class="form-control mb-2 username"
                            id="inlineFormInput"
                            name="username"
                            placeholder="Change your username here..."
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group profile-field"
                        >
                          <textarea
                            class="form-control bio"
                            id="comment"
                            name="bio"
                            placeholder="Add something to your bio here.."
                            rows="5"
                          />
                        </div>
                        <button
                          class="btn btn-outline-primary save"
                          type="submit"
                        >
                          Save Changes
                        </button>
                        <button
                          class="btn btn-outline-danger"
                          type="submit"
                        >
                          Cancel
                        </button>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "onChange": [MockFunction],
                            "onClick": [MockFunction],
                            "onSubmit": [MockFunction],
                            "profile": Object {
                              "bio": "I love sports and tech",
                              "email": "bill.twinomuhwezi@andela.com",
                              "following": false,
                              "image": null,
                              "username": "kabanga",
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "onChange": [MockFunction],
                            "onClick": [MockFunction],
                            "onSubmit": [MockFunction],
                            "profile": Object {
                              "bio": "I love sports and tech",
                              "email": "bill.twinomuhwezi@andela.com",
                              "following": false,
                              "image": null,
                              "username": "kabanga",
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "onChange": [MockFunction],
                      "onClick": [MockFunction],
                      "onSubmit": [MockFunction],
                      "profile": Object {
                        "bio": "I love sports and tech",
                        "email": "bill.twinomuhwezi@andela.com",
                        "following": false,
                        "image": null,
                        "username": "kabanga",
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container edit-form profile"
                  >
                    <form>
                      <div
                        class="form-group profile-field"
                      >
                        <div />
                        <label
                          class="btn btn-outline-primary btn-file"
                        >
                          Change image 
                          <input
                            accept=".jpg, .jpeg, .png"
                            class="file-upload"
                            name="image"
                          />
                        </label>
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <input
                          class="form-control mb-2 username"
                          id="inlineFormInput"
                          name="username"
                          placeholder="Change your username here..."
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <textarea
                          class="form-control bio"
                          id="comment"
                          name="bio"
                          placeholder="Add something to your bio here.."
                          rows="5"
                        />
                      </div>
                      <button
                        class="btn btn-outline-primary save"
                        type="submit"
                      >
                        Save Changes
                      </button>
                      <button
                        class="btn btn-outline-danger"
                        type="submit"
                      >
                        Cancel
                      </button>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "onChange": [MockFunction],
                        "onClick": [MockFunction],
                        "onSubmit": [MockFunction],
                        "profile": Object {
                          "bio": "I love sports and tech",
                          "email": "bill.twinomuhwezi@andela.com",
                          "following": false,
                          "image": null,
                          "username": "kabanga",
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "onChange": [MockFunction],
                "onClick": [MockFunction],
                "onSubmit": [MockFunction],
                "profile": Object {
                  "bio": "I love sports and tech",
                  "email": "bill.twinomuhwezi@andela.com",
                  "following": false,
                  "image": null,
                  "username": "kabanga",
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="container edit-form profile"
                    >
                      <form>
                        <div
                          class="form-group profile-field"
                        >
                          <div />
                          <label
                            class="btn btn-outline-primary btn-file"
                          >
                            Change image 
                            <input
                              accept=".jpg, .jpeg, .png"
                              class="file-upload"
                              name="image"
                            />
                          </label>
                        </div>
                        <div
                          class="form-group profile-field"
                        >
                          <input
                            class="form-control mb-2 username"
                            id="inlineFormInput"
                            name="username"
                            placeholder="Change your username here..."
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group profile-field"
                        >
                          <textarea
                            class="form-control bio"
                            id="comment"
                            name="bio"
                            placeholder="Add something to your bio here.."
                            rows="5"
                          />
                        </div>
                        <button
                          class="btn btn-outline-primary save"
                          type="submit"
                        >
                          Save Changes
                        </button>
                        <button
                          class="btn btn-outline-danger"
                          type="submit"
                        >
                          Cancel
                        </button>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "onChange": [MockFunction],
                            "onClick": [MockFunction],
                            "onSubmit": [MockFunction],
                            "profile": Object {
                              "bio": "I love sports and tech",
                              "email": "bill.twinomuhwezi@andela.com",
                              "following": false,
                              "image": null,
                              "username": "kabanga",
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "onChange": [MockFunction],
                            "onClick": [MockFunction],
                            "onSubmit": [MockFunction],
                            "profile": Object {
                              "bio": "I love sports and tech",
                              "email": "bill.twinomuhwezi@andela.com",
                              "following": false,
                              "image": null,
                              "username": "kabanga",
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "onChange": [MockFunction],
                      "onClick": [MockFunction],
                      "onSubmit": [MockFunction],
                      "profile": Object {
                        "bio": "I love sports and tech",
                        "email": "bill.twinomuhwezi@andela.com",
                        "following": false,
                        "image": null,
                        "username": "kabanga",
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container edit-form profile"
                  >
                    <form>
                      <div
                        class="form-group profile-field"
                      >
                        <div />
                        <label
                          class="btn btn-outline-primary btn-file"
                        >
                          Change image 
                          <input
                            accept=".jpg, .jpeg, .png"
                            class="file-upload"
                            name="image"
                          />
                        </label>
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <input
                          class="form-control mb-2 username"
                          id="inlineFormInput"
                          name="username"
                          placeholder="Change your username here..."
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group profile-field"
                      >
                        <textarea
                          class="form-control bio"
                          id="comment"
                          name="bio"
                          placeholder="Add something to your bio here.."
                          rows="5"
                        />
                      </div>
                      <button
                        class="btn btn-outline-primary save"
                        type="submit"
                      >
                        Save Changes
                      </button>
                      <button
                        class="btn btn-outline-danger"
                        type="submit"
                      >
                        Cancel
                      </button>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "onChange": [MockFunction],
                        "onClick": [MockFunction],
                        "onSubmit": [MockFunction],
                        "profile": Object {
                          "bio": "I love sports and tech",
                          "email": "bill.twinomuhwezi@andela.com",
                          "following": false,
                          "image": null,
                          "username": "kabanga",
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "onChange": [MockFunction],
                  "onClick": [MockFunction],
                  "onSubmit": [MockFunction],
                  "profile": Object {
                    "bio": "I love sports and tech",
                    "email": "bill.twinomuhwezi@andela.com",
                    "following": false,
                    "image": null,
                    "username": "kabanga",
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "onChange": [MockFunction],
                  "onClick": [MockFunction],
                  "onSubmit": [MockFunction],
                  "profile": Object {
                    "bio": "I love sports and tech",
                    "email": "bill.twinomuhwezi@andela.com",
                    "following": false,
                    "image": null,
                    "username": "kabanga",
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "props": Object {
          "onChange": [MockFunction],
          "onClick": [MockFunction],
          "onSubmit": [MockFunction],
          "profile": Object {
            "bio": "I love sports and tech",
            "email": "bill.twinomuhwezi@andela.com",
            "following": false,
            "image": null,
            "username": "kabanga",
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "onChange": [MockFunction],
        "onClick": [MockFunction],
        "onSubmit": [MockFunction],
        "profile": Object {
          "bio": "I love sports and tech",
          "email": "bill.twinomuhwezi@andela.com",
          "following": false,
          "image": null,
          "username": "kabanga",
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="container edit-form profile"
        >
          <form>
            <div
              class="form-group profile-field"
            >
              <div />
              <label
                class="btn btn-outline-primary btn-file"
              >
                Change image 
                <input
                  accept=".jpg, .jpeg, .png"
                  class="file-upload"
                  name="image"
                />
              </label>
            </div>
            <div
              class="form-group profile-field"
            >
              <input
                class="form-control mb-2 username"
                id="inlineFormInput"
                name="username"
                placeholder="Change your username here..."
                type="text"
              />
            </div>
            <div
              class="form-group profile-field"
            >
              <textarea
                class="form-control bio"
                id="comment"
                name="bio"
                placeholder="Add something to your bio here.."
                rows="5"
              />
            </div>
            <button
              class="btn btn-outline-primary save"
              type="submit"
            >
              Save Changes
            </button>
            <button
              class="btn btn-outline-danger"
              type="submit"
            >
              Cancel
            </button>
          </form>
        </div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <form>
            <div
              className="form-group profile-field"
            >
              <div>
                <FontAwesomeIcon
                  border={false}
                  className=""
                  color="#3F51B5"
                  fixedWidth={false}
                  flip={null}
                  icon="user-circle"
                  inverse={false}
                  listItem={false}
                  mask={null}
                  pull={null}
                  pulse={false}
                  rotation={null}
                  size="10x"
                  spin={false}
                  symbol={false}
                  title=""
                  transform={null}
                />
              </div>
              <label
                className="btn btn-outline-primary btn-file"
              >
                Change image 
                <input
                  accept=".jpg, .jpeg, .png"
                  className="file-upload"
                  name="image"
                />
              </label>
            </div>
            <div
              className="form-group profile-field"
            >
              <input
                className="form-control mb-2 username"
                id="inlineFormInput"
                name="username"
                onChange={[MockFunction]}
                placeholder="Change your username here..."
                type="text"
              />
            </div>
            <div
              className="form-group profile-field"
            >
              <textarea
                className="form-control bio"
                id="comment"
                name="bio"
                onChange={[MockFunction]}
                placeholder="Add something to your bio here.."
                rows="5"
              />
            </div>
            <button
              className="btn btn-outline-primary save"
              onClick={[MockFunction]}
              type="submit"
            >
              Save Changes
            </button>
            <button
              className="btn btn-outline-danger"
              onClick={[MockFunction]}
              type="submit"
            >
              Cancel
            </button>
          </form>,
          "className": "container edit-form profile",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": <form>
              <div
                class="form-group profile-field"
              >
                <div />
                <label
                  class="btn btn-outline-primary btn-file"
                >
                  Change image 
                  <input
                    accept=".jpg, .jpeg, .png"
                    class="file-upload"
                    name="image"
                  />
                </label>
              </div>
              <div
                class="form-group profile-field"
              >
                <input
                  class="form-control mb-2 username"
                  id="inlineFormInput"
                  name="username"
                  placeholder="Change your username here..."
                  type="text"
                />
              </div>
              <div
                class="form-group profile-field"
              >
                <textarea
                  class="form-control bio"
                  id="comment"
                  name="bio"
                  placeholder="Add something to your bio here.."
                  rows="5"
                />
              </div>
              <button
                class="btn btn-outline-primary save"
                type="submit"
              >
                Save Changes
              </button>
              <button
                class="btn btn-outline-danger"
                type="submit"
              >
                Cancel
              </button>
            </form>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="form-group profile-field"
                >
                  <div>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      color="#3F51B5"
                      fixedWidth={false}
                      flip={null}
                      icon="user-circle"
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size="10x"
                      spin={false}
                      symbol={false}
                      title=""
                      transform={null}
                    />
                  </div>
                  <label
                    className="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      className="file-upload"
                      name="image"
                    />
                  </label>
                </div>,
                <div
                  className="form-group profile-field"
                >
                  <input
                    className="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    onChange={[MockFunction]}
                    placeholder="Change your username here..."
                    type="text"
                  />
                </div>,
                <div
                  className="form-group profile-field"
                >
                  <textarea
                    className="form-control bio"
                    id="comment"
                    name="bio"
                    onChange={[MockFunction]}
                    placeholder="Add something to your bio here.."
                    rows="5"
                  />
                </div>,
                <button
                  className="btn btn-outline-primary save"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Save Changes
                </button>,
                <button
                  className="btn btn-outline-danger"
                  onClick={[MockFunction]}
                  type="submit"
                >
                  Cancel
                </button>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <div
                  class="form-group profile-field"
                >
                  <div />
                  <label
                    class="btn btn-outline-primary btn-file"
                  >
                    Change image 
                    <input
                      accept=".jpg, .jpeg, .png"
                      class="file-upload"
                      name="image"
                    />
                  </label>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div>
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        color="#3F51B5"
                        fixedWidth={false}
                        flip={null}
                        icon="user-circle"
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size="10x"
                        spin={false}
                        symbol={false}
                        title=""
                        transform={null}
                      />
                    </div>,
                    <label
                      className="btn btn-outline-primary btn-file"
                    >
                      Change image 
                      <input
                        accept=".jpg, .jpeg, .png"
                        className="file-upload"
                        name="image"
                      />
                    </label>,
                  ],
                  "className": "form-group profile-field",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <div />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <FontAwesomeIcon
                        border={false}
                        className=""
                        color="#3F51B5"
                        fixedWidth={false}
                        flip={null}
                        icon="user-circle"
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size="10x"
                        spin={false}
                        symbol={false}
                        title=""
                        transform={null}
                      />,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "border": false,
                          "className": "",
                          "color": "#3F51B5",
                          "fixedWidth": false,
                          "flip": null,
                          "icon": "user-circle",
                          "inverse": false,
                          "listItem": false,
                          "mask": null,
                          "pull": null,
                          "pulse": false,
                          "rotation": null,
                          "size": "10x",
                          "spin": false,
                          "symbol": false,
                          "title": "",
                          "transform": null,
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": "div",
                  },
                  Object {
                    "instance": <label
                      class="btn btn-outline-primary btn-file"
                    >
                      Change image 
                      <input
                        accept=".jpg, .jpeg, .png"
                        class="file-upload"
                        name="image"
                      />
                    </label>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Change image ",
                        <input
                          accept=".jpg, .jpeg, .png"
                          className="file-upload"
                          name="image"
                        />,
                      ],
                      "className": "btn btn-outline-primary btn-file",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Change image ",
                      Object {
                        "instance": <input
                          accept=".jpg, .jpeg, .png"
                          class="file-upload"
                          name="image"
                        />,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "accept": ".jpg, .jpeg, .png",
                          "className": "file-upload",
                          "name": "image",
                          "onClick": undefined,
                        },
                        "ref": null,
                        "rendered": Array [
                          undefined,
                        ],
                        "type": "input",
                      },
                    ],
                    "type": "label",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <div
                  class="form-group profile-field"
                >
                  <input
                    class="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    placeholder="Change your username here..."
                    type="text"
                  />
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <input
                    className="form-control mb-2 username"
                    id="inlineFormInput"
                    name="username"
                    onChange={[MockFunction]}
                    placeholder="Change your username here..."
                    type="text"
                  />,
                  "className": "form-group profile-field",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <input
                      class="form-control mb-2 username"
                      id="inlineFormInput"
                      name="username"
                      placeholder="Change your username here..."
                      type="text"
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "form-control mb-2 username",
                      "id": "inlineFormInput",
                      "name": "username",
                      "onChange": [MockFunction],
                      "placeholder": "Change your username here...",
                      "type": "text",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "input",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <div
                  class="form-group profile-field"
                >
                  <textarea
                    class="form-control bio"
                    id="comment"
                    name="bio"
                    placeholder="Add something to your bio here.."
                    rows="5"
                  />
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <textarea
                    className="form-control bio"
                    id="comment"
                    name="bio"
                    onChange={[MockFunction]}
                    placeholder="Add something to your bio here.."
                    rows="5"
                  />,
                  "className": "form-group profile-field",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <textarea
                      class="form-control bio"
                      id="comment"
                      name="bio"
                      placeholder="Add something to your bio here.."
                      rows="5"
                    />,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "className": "form-control bio",
                      "id": "comment",
                      "name": "bio",
                      "onChange": [MockFunction],
                      "placeholder": "Add something to your bio here..",
                      "rows": "5",
                    },
                    "ref": null,
                    "rendered": Array [
                      undefined,
                    ],
                    "type": "textarea",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <button
                  class="btn btn-outline-primary save"
                  type="submit"
                >
                  Save Changes
                </button>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Save Changes",
                  "className": "btn btn-outline-primary save",
                  "onClick": [MockFunction],
                  "type": "submit",
                },
                "ref": null,
                "rendered": Array [
                  "Save Changes",
                ],
                "type": "button",
              },
              Object {
                "instance": <button
                  class="btn btn-outline-danger"
                  type="submit"
                >
                  Cancel
                </button>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Cancel",
                  "className": "btn btn-outline-danger",
                  "onClick": [MockFunction],
                  "type": "submit",
                },
                "ref": null,
                "rendered": Array [
                  "Cancel",
                ],
                "type": "button",
              },
            ],
            "type": "form",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
